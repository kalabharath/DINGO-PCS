#!/usr/bin/env python

"""
Project_Name: constraints/looplengthConstraint, File_name: looplengthConstraint.py
Aufthor: kalabharath, Email: kalabharath@gmail.com
Date: 27/11/15 , Time:2:28 PM
"""


def getCAcoo(frag):
    """
    :param frag:
    :return:
    """
    # print frag
    x, y, z = [], [], []
    for i in range(0, len(frag[0])):
        if frag[3][i] == 'CA':
            x.append(frag[0][i])
            y.append(frag[1][i])
            z.append(frag[2][i])
    return [x, y, z]


def get_dist(r1, r2):
    import math
    x1, y1, z1 = r1[0], r1[1], r1[2]
    x2, y2, z2 = r2[0], r2[1], r2[2]
    return math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1) + (z2 - z1) * (z2 - z1))


def loopConstraint(coo_arrays, sseorder, direction, smotif_def):
    """
    Determine whether the assembled Smotif is too far away
    3.4 A * number of loop residues
    :param coo_arrays:
    :param sseorder:
    :param direction:
    :return:
    """
    hs_dict = {1: 3.85, 2: 3.56, 3: 3.25, 4: 3.04, 5: 2.87, 6: 2.67, 7: 2.5, 8: 2.4, 9: 2.32, 10: 2.22, 11: 2.15,
               12: 2.04, 13: 2.0, 14: 1.92, 15: 1.87, 16: 1.76, 17: 1.71, 18: 1.69, 19: 1.63, 20: 1.62, 21: 1.46,
               22: 1.43, 23: 1.4, 24: 1.27, 25: 1.35, 26: 1.24, 27: 1.37, 28: 1.34, 29: 1.2, 30: 1.0}

    sh_dict = {1: 3.85, 2: 3.56, 3: 3.25, 4: 3.04, 5: 2.87, 6: 2.67, 7: 2.5, 8: 2.4, 9: 2.32, 10: 2.22, 11: 2.15,
               12: 2.04, 13: 2.0, 14: 1.92, 15: 1.87, 16: 1.76, 17: 1.71, 18: 1.69, 19: 1.63, 20: 1.62, 21: 1.46,
               22: 1.43, 23: 1.4, 24: 1.27, 25: 1.35, 26: 1.24, 27: 1.37, 28: 1.34, 29: 1.2, 30: 1.0}

    ss_dict = {1: 3.85, 2: 3.57, 3: 2.51, 4: 2.79, 5: 2.15, 6: 2.09, 7: 2.06, 8: 2.02, 9: 1.87, 10: 2.02, 11: 1.87,
               12: 1.82, 13: 1.63, 14: 1.63, 15: 1.56, 16: 1.45, 17: 1.53, 18: 1.48, 19: 1.48, 20: 1.36, 21: 1.27,
               22: 1.29, 23: 1.21, 24: 1.17, 25: 1.12, 26: 1.05, 27: 1.07, 28: 0.99, 29: 1.15, 30: 0.96}

    hh_dict = {1: 3.85, 2: 3.5, 3: 3.35, 4: 3.1, 5: 3.01, 6: 2.92, 7: 2.84, 8: 2.79, 9: 2.71, 10: 2.58, 11: 2.5,
               12: 2.42, 13: 2.42, 14: 2.26, 15: 2.14, 16: 2.06, 17: 2.01, 18: 1.93, 19: 1.89, 20: 1.8, 21: 1.72,
               22: 1.68, 23: 1.74, 24: 1.67, 25: 1.59, 26: 1.43, 27: 1.47, 28: 1.38, 29: 1.29, 30: 1.25}

    nsh_dict = {1: 3.809, 2: 3.137, 3: 2.818, 4: 2.482, 5: 2.154, 6: 1.928, 7: 1.749, 8: 1.67, 9: 1.531, 10: 1.428,
                11: 1.377, 12: 1.282, 13: 1.261, 14: 1.203, 15: 1.135, 16: 1.045, 17: 1.004, 18: 1.02, 19: 0.977,
                20: 0.928, 21: 0.865, 22: 0.834, 23: 0.811, 24: 0.756, 25: 0.761, 26: 0.749, 27: 0.777, 28: 0.74,
                29: 0.655, 30: 0.648}
    nhs_dict = {1: 3.809, 2: 3.137, 3: 2.818, 4: 2.482, 5: 2.154, 6: 1.928, 7: 1.749, 8: 1.67, 9: 1.531, 10: 1.428,
                11: 1.377, 12: 1.282, 13: 1.261, 14: 1.203, 15: 1.135, 16: 1.045, 17: 1.004, 18: 1.02, 19: 0.977,
                20: 0.928, 21: 0.865, 22: 0.834, 23: 0.811, 24: 0.756, 25: 0.761, 26: 0.749, 27: 0.777, 28: 0.74,
                29: 0.655, 30: 0.648}

    nhh_dict = {1: 3.81, 2: 3.036, 3: 2.836, 4: 2.511, 5: 2.275, 6: 2.178, 7: 2.026, 8: 1.876, 9: 1.835, 10: 1.669,
                11: 1.658, 12: 1.666, 13: 1.625, 14: 1.53, 15: 1.445, 16: 1.374, 17: 1.292, 18: 1.212, 19: 1.164,
                20: 1.133, 21: 1.049, 22: 1.043, 23: 1.074, 24: 0.977, 25: 0.965, 26: 0.938, 27: 0.868, 28: 0.824,
                29: 0.805, 30: 0.788}

    nss_dict = {1: 3.81, 2: 3.19, 3: 1.846, 4: 1.607, 5: 1.274, 6: 1.14, 7: 1.139, 8: 1.198, 9: 1.177, 10: 1.115, 11: 1.029,
                12: 1.048, 13: 0.935, 14: 0.91, 15: 0.908, 16: 0.85, 17: 0.83, 18: 0.852, 19: 0.849, 20: 0.761,
                21: 0.722, 22: 0.742, 23: 0.684, 24: 0.677, 25: 0.611, 26: 0.587, 27: 0.596, 28: 0.565, 29: 0.576,
                30: 0.532}

    hh_std = {1: 0.027163086461896965, 2: 0.28438436991504368, 3: 0.3968169360880282, 4: 0.44076537124490184,
              5: 0.48323210014152956, 6: 0.49908516534910657, 7: 0.50380669758069385, 8: 0.53711637559787107,
              9: 0.53380694897630743, 10: 0.5384689586073913, 11: 0.5448095322967057, 12: 0.50708105793299463,
              13: 0.49386158474251707, 14: 0.46792408563934967, 15: 0.44681813034474904, 16: 0.42788225010997971,
              17: 0.43895367173058292, 18: 0.41511090167545139, 19: 0.43190010212137903, 20: 0.39230431844851915,
              21: 0.38227314939766749, 22: 0.38000765868570813, 23: 0.40103104902607156, 24: 0.38089358623425973,
              25: 0.37950050117724765, 26: 0.3168184512735408, 27: 0.3280318509634163, 28: 0.30436406426596607,
              29: 0.31830135013418465, 30: 0.27320169272734091}
    ss_std = {1: 0.027163086461896965, 2: 0.31336081040186348, 3: 0.29268885317617527, 4: 0.46945043312596946,
              5: 0.4185637032192977, 6: 0.47409787897464412, 7: 0.49025816279987205, 8: 0.50467075860885247,
              9: 0.44709753432726207, 10: 0.50080923252656506, 11: 0.4749672391193373, 12: 0.47855814630551569,
              13: 0.41659159618045938, 14: 0.45072892164089823, 15: 0.41628558102398106, 16: 0.3727114449700607,
              17: 0.39537315339630136, 18: 0.47009140270660243, 19: 0.41811307268333131, 20: 0.3603731591225926,
              21: 0.3488561022105352, 22: 0.35885823996687022, 23: 0.31151828537252962, 24: 0.30202007677813658,
              25: 0.28094852167544554, 26: 0.27857857392364332, 27: 0.26446004023731451, 28: 0.25900026044971425,
              29: 0.34566902035125624, 30: 0.25740819212113247}
    sh_std = {1: 0.066791939687996502, 2: 0.2779468267813876, 3: 0.36142356971361722, 4: 0.41753111941616528,
              5: 0.44988224192452853, 6: 0.44801116351631259, 7: 0.4551949525382345, 8: 0.43600663600515127,
              9: 0.45232506892511842, 10: 0.43835403946446183, 11: 0.4155899486163403, 12: 0.40748050298731653,
              13: 0.4021157670744977, 14: 0.41070596649369862, 15: 0.40452591324905435, 16: 0.38130469529803579,
              17: 0.37756644220404256, 18: 0.37335119999366645, 19: 0.36004971571395628, 20: 0.37164424080992442,
              21: 0.33771019337502778, 22: 0.32234422480356595, 23: 0.3082403466325796, 24: 0.28511209738507448,
              25: 0.28867054373003581, 26: 0.295939792071229, 27: 0.29752545689953064, 28: 0.2939649632155889,
              29: 0.28591535325801665, 30: 0.20779871457352514}
    hs_std = {1: 0.066791939687996502, 2: 0.2779468267813876, 3: 0.36142356971361722, 4: 0.41753111941616528,
              5: 0.44988224192452853, 6: 0.44801116351631259, 7: 0.4551949525382345, 8: 0.43600663600515127,
              9: 0.45232506892511842, 10: 0.43835403946446183, 11: 0.4155899486163403, 12: 0.40748050298731653,
              13: 0.4021157670744977, 14: 0.41070596649369862, 15: 0.40452591324905435, 16: 0.38130469529803579,
              17: 0.37756644220404256, 18: 0.37335119999366645, 19: 0.36004971571395628, 20: 0.37164424080992442,
              21: 0.33771019337502778, 22: 0.32234422480356595, 23: 0.3082403466325796, 24: 0.28511209738507448,
              25: 0.28867054373003581, 26: 0.295939792071229, 27: 0.29752545689953064, 28: 0.2939649632155889,
              29: 0.28591535325801665, 30: 0.20779871457352514}

    if direction == 'right':
        csse = sseorder[-1]
        psse = sseorder[-2]
        loop_length = csse[-2] - psse[-1]
        c_coo = getCAcoo(coo_arrays[-1])
        p_coo = getCAcoo(coo_arrays[-2])
        c_CA = [c_coo[0][0], c_coo[1][0], c_coo[2][0]]
        p_CA = [p_coo[0][-1], p_coo[1][-1], p_coo[2][-1]]

    else:
        csse = sseorder[0]
        psse = sseorder[1]
        loop_length = psse[-2] - csse[-1]
        #print "loop_length", loop_length, psse, csse
        c_coo = getCAcoo(coo_arrays[0])
        p_coo = getCAcoo(coo_arrays[1])
        c_CA = [c_coo[0][-1], c_coo[1][-1], c_coo[2][-1]]
        p_CA = [p_coo[0][0], p_coo[1][0], p_coo[2][0]]

    dist = get_dist(c_CA, p_CA)
    loop_length = float(loop_length)
    if loop_length > 30:
        return False

    try:
        Ndist = round(dist / loop_length, 2)
    except:
        print "zero division wtf"
        print dist, loop_length
        print csse, psse
        return False

    stat_dist = 0
    stat_std = 0
    if smotif_def[0] == 'hh':
        stat_dist = nhh_dict[loop_length]
        stat_std = hh_std[loop_length] * 2
    if smotif_def[0] == 'hs':
        stat_dist = nhs_dict[loop_length]
        stat_std = hs_std[loop_length] * 2
    if smotif_def[0] == 'sh':
        stat_dist = nsh_dict[loop_length]
        stat_std = sh_std[loop_length] * 2
    if smotif_def[0] == 'ss':
        stat_dist = nss_dict[loop_length]
        stat_std = ss_std[loop_length] * 2

    if stat_dist - stat_std <= Ndist <= stat_dist + stat_std:
        #print "stat_dist", "Ndist"
        #print stat_dist, Ndist, loop_length, stat_std, stat_dist + stat_std
        return True
    else:
        return False


"""
    max_dist = loop_length * 3.4  # 3.8 Angstrom is the length between CA-CA in a linear polypeptide chain
    # however on a peptide triangular like arrangement the avg distance is 3.4 A

    if dist > max_dist:
        return False
    else:
        return True
"""
