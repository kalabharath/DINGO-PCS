# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_fastT1FM', [dirname(__file__)])
        except ImportError:
            import _fastT1FM
            return _fastT1FM
        if fp is not None:
            try:
                _mod = imp.load_module('_fastT1FM', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _fastT1FM = swig_import_helper()
    del swig_import_helper
else:
    import _fastT1FM
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def MakeDMatrix(i, j):
    return _fastT1FM.MakeDMatrix(i, j)
MakeDMatrix = _fastT1FM.MakeDMatrix

def FreeDMatrix(a):
    return _fastT1FM.FreeDMatrix(a)
FreeDMatrix = _fastT1FM.FreeDMatrix

def FreeDArray(a):
    return _fastT1FM.FreeDArray(a)
FreeDArray = _fastT1FM.FreeDArray

def GetDArray(i, j, a):
    return _fastT1FM.GetDArray(i, j, a)
GetDArray = _fastT1FM.GetDArray

def SetDArray(i, j, a, v):
    return _fastT1FM.SetDArray(i, j, a, v)
SetDArray = _fastT1FM.SetDArray

def GetDvector(i, a):
    return _fastT1FM.GetDvector(i, a)
GetDvector = _fastT1FM.GetDvector

def SetDvector(i, a, v):
    return _fastT1FM.SetDvector(i, a, v)
SetDvector = _fastT1FM.SetDvector

def MakeDvector(n):
    return _fastT1FM.MakeDvector(n)
MakeDvector = _fastT1FM.MakeDvector

def MakeIvector(n):
    return _fastT1FM.MakeIvector(n)
MakeIvector = _fastT1FM.MakeIvector

def GetIvector(i, a):
    return _fastT1FM.GetIvector(i, a)
GetIvector = _fastT1FM.GetIvector

def SetIvector(i, a, v):
    return _fastT1FM.SetIvector(i, a, v)
SetIvector = _fastT1FM.SetIvector

def Saupe2X(s, X):
    return _fastT1FM.Saupe2X(s, X)
Saupe2X = _fastT1FM.Saupe2X

def rfastT1FM_multi(nM, rMx, rMy, rMz, nsets, npcs, xyz, pcs, tensor, Xaxrh_range):
    return _fastT1FM.rfastT1FM_multi(nM, rMx, rMy, rMz, nsets, npcs, xyz, pcs, tensor, Xaxrh_range)
rfastT1FM_multi = _fastT1FM.rfastT1FM_multi
# This file is compatible with both classic and new-style classes.


